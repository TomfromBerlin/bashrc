# This file will be called in .bashrc
# Here are the functions you will normally find in .bashrc or /etc/bash.bahsrc
#
#----------------------------------------------------------------------------------------------------
#
# Start Command-not-found (better call in /etc/bash.bashrc)
#
# When command-not-found is installed, use it!
# Unter Arch-Linux folgende Zeile auskommentieren:
#source /usr/share/doc/pkgfile/command-not-found.bash
# dann wie bei allen anderen Distros
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
    function command_not_found_handle {
	    # check because c-n-f could've been removed in the meantime
               if [ -x /usr/lib/command-not-found ]; then
           /usr/bin/python /usr/lib/command-not-found -- "$1"
                   return $?
                elif [ -x /usr/share/command-not-found/command-not-found ]; then
           /usr/bin/python /usr/share/command-not-found/command-not-found -- "$1"
                   return $?
        else
           printf "%s: Programm ist scheinbar nicht installiert oder defekt.\n" "$1" >&2
           return 127
        fi
    }
fi
#
# End Command-not-found
#
#----------------------------------------------------------------------------------------------------
#
# Start less (command)
# colorized output, comment in if the file ~/shellcfg/.colors isn't present
#man() {
    #LESS_TERMCAP_md=$'\e[01;31m' \
    #LESS_TERMCAP_me=$'\e[0m' \
    #LESS_TERMCAP_us=$'\e[01;32m' \
    #LESS_TERMCAP_ue=$'\e[0m' \
    #LESS_TERMCAP_so=$'\e[45;93m' \
    #LESS_TERMCAP_se=$'\e[0m' \

    #command man "$@"
#}
#
# better output
# [ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"
#
# End less (command)
#----------------------------------------------------------------------------------------------------
#
#----------------------------------------------------------------------------------------------------
# Find file (Usage: ff <filename>)
function ff() { find . -type f -iname '*'$*'*' -ls; }
#----------------------------------------------------------------------------------------------------
# "extract <filename>" extracts all formats
# credits: urukrama, Ubuntuforums.org
function extract()
{
if [ -f $1 ] ; then
 case $1 in
 *.tar.bz2)   tar xvjf $1     ;;
 *.tar.gz)    tar xvzf $1     ;;
 *.bz2)       bunzip2 $1      ;;
 *.rar)       unrar x $1      ;;
 *.gz)        gunzip $1       ;;
 *.tar)       tar xvf $1      ;;
 *.tbz2)      tar xvjf $1     ;;
 *.tgz)       tar xvzf $1     ;;
 *.zip)       unzip $1        ;;
 *.Z)         uncompress $1   ;;
 *.7z)        7z x $1         ;;
 *)           echo "'$1' kann nicht mit extract entpackt werden!" ;;
 esac
  else
 echo "'$1' ist keine gÃ¼ltige Datei!"
fi
}
#
#----------------------------------------------------------------------------------------------------
# This function checks if certain applications are installed and defines aliases in case of.
# This will not remove the application. But if you call it the usual way the more sophisticated version
# will be used, e.g. 'htop' instead of 'top'
# sauce: https://github.com/slomkowski/bash-full-of-colors/blob/master/bash_aliases.sh
#
function __add_command_replace_alias() {
    if [ -x "`which $2 2>&1`" ]; then
        alias $1=$2
    fi
}

if [ -x "`which most 2>&1`" ]; then
    alias less=most
    export PAGER=most
fi

if [ -x "`which vim 2>&1`" ]; then
        export EDITOR=vim
fi

__add_command_replace_alias tail 'multitail'
__add_command_replace_alias df 'pydf'
__add_command_replace_alias traceroute 'mtr'
__add_command_replace_alias tracepath 'mtr'
__add_command_replace_alias top 'htop'

#-----------------------------------------------------------------------------------------------------
#
# credit to Oktay https://askubuntu.com/users/147615/oktay
# https://askubuntu.com/questions/27314/script-to-display-all-terminal-colors/279014#279014
#
function allcolors() {
for x in 0 1 4 5 7 8; do for i in {30..37}; do for a in {40..47}; do echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m "; done; echo; done; done; echo ""; 
}
#
# Another solution is this: 'msgcat --color=test', but you need to install 'gettext': sudo apt install gettext
#
#----------------------------------------------------------------------------------------------------
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.
#function truecolors() {     
#for fgbg in 38 48 ; do # Foreground / Background
#    for color in {0..255} ; do # Colors
#        # Display the color
#        printf "\e[${fgbg};5;%sm  %3s  \e[0m" $color $color
#        # Display 6 colors per lines
#        if [ $((($color + 1) % 6)) == 4 ] ; then
#        echo # New line
#        fi
#    done
#    echo # New line
#done;
#     
#exit 0
#}
#
# wtfis: Shows what a given command really is. It is a combination of "type", "file"
# and "ls". Unlike "which", it does not only take $PATH into account. This
# means it works for aliases and hashes, too. (The name "whatis" was taken,
# and I did not want to overwrite "which", hence "wtfis".)
# The return value is the result of "type" for the last command specified.
#
# usage:
#
#   wtfis man
#   wtfis vi
# 
# sauce: https://raw.githubusercontent.com/janmoesen/tilde/master/.bash/commands
#
wtfis()
{
  local cmd=""
  local type_tmp=""
  local type_command=""
  local i=1
  local ret=0

  if [ -n "$BASH_VERSION" ]; then
    type_command="type -p"
  else
    type_command=( whence -p ) # changes variable type as well
  fi

  if [ $# -eq 0 ]; then
    # Use "fc" to get the last command, and use that when no command
    # was given as a parameter to "wtfis".
    set -- $(fc -nl -1)

    while [ $# -gt 0 -a '(' "sudo" = "$1" -o "-" = "${1:0:1}" ')' ]; do
      # Ignore "sudo" and options ("-x" or "--bla").
      shift
    done

    # Replace the positional parameter array with the last command name.
    set -- "$1"
  fi

  for cmd; do
    type_tmp="$(type "$cmd")"
    ret=$?

    if [ $ret -eq 0 ]; then
      # Try to get the physical path. This works for hashes and
      # "normal" binaries.
      local path_tmp=$(${type_command} "$cmd" 2>/dev/null)

      if [ $? -ne 0 ] || ! test -x "$path_tmp"; then
        # Show the output from "type" without ANSI escapes.
        echo "${type_tmp//$'\e'/\\033}"

        case "$(command -v "$cmd")" in
          'alias')
            local alias_="$(alias "$cmd")"

            # The output looks like "alias foo='bar'" so
            # strip everything except the body.
            alias_="${alias_#*\'}"
            alias_="${alias_%\'}"

            # Use "read" to process escapes. E.g. 'test\ it'
            # will # be read as 'test it'. This allows for
            # spaces inside command names.
            read -d ' ' alias_ <<< "$alias_"

            # Recurse and indent the output.
            # TODO: prevent infinite recursion
            wtfis "$alias_" 2>&2 | sed 's/^/  /'

            ;;
          'keyword' | 'builtin')

            # Get the one-line description from the built-in
            # help, if available. Note that this does not
            # guarantee anything useful, though. Look at the
            # output for "help set", for instance.
            help "$cmd" 2>/dev/null | {
              local buf line
              read -r line
              while read -r line; do
                buf="$buf${line/.  */.} "
                if [[ "$buf" =~ \.\ $ ]]; then
                  echo "$buf"
                  break
                fi
              done
            }

            ;;
        esac
      else
        # For physical paths, get some more info.
        # First, get the one-line description from the man page.
        # ("col -b" gets rid of the backspaces used by OS X's man
        # to get a "bold" font.)
        (COLUMNS=10000 man "$(basename "$path_tmp")" 2>/dev/null) | col -b | \
        awk '/^NAME$/,/^$/' | {
          local buf=""
          local line=""

          read -r line
          while read -r line; do
            buf="$buf${line/.  */.} "
            if [[ "$buf" =~ \.\ $ ]]; then
              echo "$buf"
              buf=''
              break
            fi
          done

          [ -n "$buf" ] && echo "$buf"
        }

        # Get the absolute path for the binary.
        local full_path_tmp="$(
          cd "$(dirname "$path_tmp")" \
            && echo "$PWD/$(basename "$path_tmp")" \
            || echo "$path_tmp"
        )"

        # Then, combine the output of "type" and "file".
        local fileinfo="$(file "$full_path_tmp")"
        echo "${type_tmp%$path_tmp}${fileinfo}"

        # Finally, show it using "ls" and highlight the path.
        # If the path is a symlink, keep going until we find the
        # final destination. (This assumes there are no circular
        # references.)
        local paths_tmp=("$path_tmp")
        local target_path_tmp="$path_tmp"

        while [ -L "$target_path_tmp" ]; do
          target_path_tmp="$(readlink "$target_path_tmp")"
          paths_tmp+=("$(
            # Do some relative path resolving for systems
            # without readlink --canonicalize.
            cd "$(dirname "$path_tmp")"
            cd "$(dirname "$target_path_tmp")"
            echo "$PWD/$(basename "$target_path_tmp")"
          )")
        done

        local ls="$(command ls -fdalF "${paths_tmp[@]}")"
        echo "${ls/$path_tmp/$'\e[7m'${path_tmp}$'\e[27m'}"
      fi
    fi

    # Separate the output for all but the last command with blank lines.
    [ $i -lt $# ] && echo
    let i++
  done

  return $ret
}
